My IoT Platform: ESP32 Connection Guide
Last Updated: July 22, 2025

1. Introduction
Welcome, ESP32 developer! This guide provides the exact steps to connect your ESP32-based IoT device to our platform. By following these instructions, you will be able to send sensor data from your device and have it stored and visualized in real-time.

This guide assumes you have already been provided with the server address and a unique authentication token from the platform administrator.

2. Prerequisites
Before you begin, ensure you have the following ready:

Hardware:
An ESP32 development board.

The sensors you wish to connect (e.g., a DHT11 temperature sensor and a gas sensor).

A Micro-USB cable.

Software (on your computer):
Arduino IDE installed.

ESP32 Board Support configured in the Arduino IDE.

The following Arduino libraries installed via the Library Manager:

WebSockets by Markus Sattler

ArduinoJson by Benoit Blanchon

3. Connection Credentials
To connect your device, you will need:

Your Wi-Fi Credentials: The SSID and password for your Wi-Fi network.

The Server IP Address: The local IP address of the server (e.g., 192.168.0.100).

Your Authentication Token: The unique token for your project from the dashboard.

4. The Arduino Code
Copy and paste the following code into a new sketch in your Arduino IDE. This code is the complete template for connecting and sending data from multiple sensors based on their pin numbers.

#include <WiFi.h>
#include <WebSocketsClient.h>
#include <ArduinoJson.h>

// ===================================================
// --- CONFIGURE YOUR SETTINGS HERE ---
// ===================================================

// 1. Your Wi-Fi Credentials
const char* ssid = "YOUR_WIFI_SSID";
const char* password = "YOUR_WIFI_PASSWORD";

// 2. Your Server's IP Address (find with 'ipconfig' or 'ifconfig')
const char* websockets_host = "YOUR_COMPUTER_IP_ADDRESS"; 
const uint16_t websockets_port = 3000;

// 3. Your Authentication Token (from your project dashboard)
const char* authToken = "PASTE_YOUR_TOKEN_HERE";

// ===================================================

WebSocketsClient webSocket;

// Define the analog pins your sensors are connected to
const int SENSOR_PIN_A0 = A0; // For DHT11 or similar
const int SENSOR_PIN_A1 = A1; // For Gas sensor or similar

void webSocketEvent(WStype_t type, uint8_t * payload, size_t length) {
  switch(type) {
    case WStype_DISCONNECTED:
      Serial.printf("[WSc] Disconnected!\n");
      break;
    case WStype_CONNECTED:
      Serial.printf("[WSc] Connected to server!\n");
      // Send authentication token to the server
      {
        StaticJsonDocument<200> authDoc;
        authDoc["token"] = authToken;
        authDoc["action"] = "auth";
        
        String authString;
        serializeJson(authDoc, authString);
        webSocket.sendTXT(authString);
      }
      break;
    case WStype_TEXT:
      Serial.printf("[WSc] Server response: %s\n", payload);
      break;
    default:
      break;
  }
}

void setup() {
  Serial.begin(115200);
  delay(1000);

  // Set pin modes for your sensors
  pinMode(SENSOR_PIN_A0, INPUT);
  pinMode(SENSOR_PIN_A1, INPUT);

  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi Connected.");
  Serial.print("ESP32 IP Address: ");
  Serial.println(WiFi.localIP());

  webSocket.begin(websockets_host, websockets_port, "/");
  webSocket.onEvent(webSocketEvent);
  webSocket.setReconnectInterval(5000);
}

void loop() {
  webSocket.loop();

  static unsigned long lastSendTime = 0;
  if (millis() - lastSendTime > 10000) { // Send data every 10 seconds
    lastSendTime = millis();
    if (webSocket.isConnected()) {
      // Read sensor values
      float sensorValueA0 = analogRead(SENSOR_PIN_A0);
      float sensorValueA1 = analogRead(SENSOR_PIN_A1);
      
      // Create JSON payload
      StaticJsonDocument<300> dataDoc;
      dataDoc["token"] = authToken;
      dataDoc["action"] = "data";
      
      JsonObject payload = dataDoc.createNestedObject("payload");
      payload["A0"] = sensorValueA0;
      payload["A1"] = sensorValueA1;
      
      String dataString;
      serializeJson(dataDoc, dataString);
      
      webSocket.sendTXT(dataString);
      Serial.printf("Sent data to server: %s\n", dataString.c_str());
    }
  }
}

5. How It Works
Configuration: Fill in your Wi-Fi details, server IP, and project token in the Arduino sketch.

Pin Definitions: The code defines constants for the analog pins (A0, A1) that you've connected your sensors to.

Data Transmission: Every 10 seconds, the loop() function reads the values from these pins.

JSON Payload: It then constructs a JSON object that looks like this:

{
  "token": "your-token-goes-here",
  "action": "data",
  "payload": {
    "A0": 458.00,
    "A1": 789.00
  }
}

Server-Side Logic: The server receives this payload. It finds the project matching the token, then iterates through the payload object. For each key-value pair (e.g., "A0": 458.00), it finds the sensor with the matching pinNumber and saves the data.

This new approach makes your project much more scalable and easier to manage, as the data from your device is now directly tied to the sensor configuration you set up in your dashboard.
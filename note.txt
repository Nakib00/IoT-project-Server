## Step 1: Connect to the Server

First, you need to connect your ESP device to your server's WebSocket. You will need these four items from your project:

1.  **Your Wi-Fi SSID**
2.  **Your Wi-Fi Password**
3.  **Your Server's IP Address** (the computer running the code)
4.  **Your Project Token** (from the project dashboard)

**Example Code (Arduino/ESP32):**

```cpp
#include <WiFi.h>
#include <WebSocketsClient.h>

// 1. Add your credentials
const char* ssid = "YOUR_WIFI_SSID";
const char* password = "YOUR_WIFI_PASSWORD";
const char* websockets_host = "192.168.1.10"; // <-- 2. Your Computer's IP
const uint16_t websockets_port = 3000;
const char* authToken = "c6cd50ef-32b6-4d88-9837-a2a001fac898"; // <-- 3. Your Project Token

WebSocketsClient webSocket;

void setup() {
  Serial.begin(115200);
  
  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi Connected.");

  // 4. Connect to WebSocket server
  webSocket.begin(websockets_host, websockets_port, "/");
  webSocket.onEvent(webSocketEvent); // Set a function to handle events
  webSocket.setReconnectInterval(5000);
}
```

-----

## Step 2: Authenticate (The "Login")

As soon as your device connects, the server doesn't know who you are. Your first message **must** be an "auth" message to log in.

You only need to do this **one time** when the `WStype_CONNECTED` event happens.

**JSON Payload to Send:**

```json
{
  "token": "YOUR_PROJECT_TOKEN",
  "action": "auth"
}
```

**Example Code (The `webSocketEvent` function):**

```cpp
#include <ArduinoJson.h> // Make sure to install this library

void webSocketEvent(WStype_t type, uint8_t * payload, size_t length) {
  switch(type) {
    case WStype_CONNECTED:
      Serial.println("[WSc] Connected to server!");
      
      // Send authentication token to the server
      StaticJsonDocument<200> authDoc;
      authDoc["token"] = authToken;
      authDoc["action"] = "auth"; // This tells the server you are logging in
      
      String authString;
      serializeJson(authDoc, authString);
      webSocket.sendTXT(authString); // Send the login message
      break;
      
    case WStype_DISCONNECTED:
      Serial.println("[WSc] Disconnected!");
      break;
      
    case WStype_TEXT:
      Serial.printf("[WSc] Server response: %s\n", payload);
      break;
  }
}
```

If your token is valid, the server will "authenticate" your connection. Now you can send data.

-----

## Step 3: Send Sensor Data (The "Data Packet")

Now you can send your actual sensor data. You should do this inside your `loop()` function every few seconds.

To save data, the server is listening for a message with `action: "device_update"`. The most important part is the `payload.sensors` object, where the **keys** match your dashboard **pinNumbers**.

**JSON Payload to Send:**

```json
{
  "token": "YOUR_PROJECT_TOKEN",
  "action": "device_update",
  "payload": {
    "sensors": {
      "A0": 753.00,
      "A1": 254.00
    }
  }
}
```

**Example Code (The `loop()` function):**

```cpp
unsigned long lastSendTime = 0;

void loop() {
  webSocket.loop(); // Keep the WebSocket connection alive

  // Send data every 10 seconds (10000 ms)
  if (millis() - lastSendTime > 10000) {
    lastSendTime = millis();
    
    if (webSocket.isConnected()) {
      // 1. Read your sensor values
      float tempValue = analogRead(A0); 
      float lightValue = analogRead(A1);

      // 2. Create the JSON data packet
      StaticJsonDocument<300> dataDoc;
      dataDoc["token"] = authToken;
      dataDoc["action"] = "device_update"; // This tells the server to save data

      // 3. This is the critical part
      JsonObject payload = dataDoc.createNestedObject("payload");
      JsonObject sensors = payload.createNestedObject("sensors");
      
      // These keys "A0" and "A1" MUST match your sensor pinNumber in the dashboard
      sensors["A0"] = tempValue;
      sensors["A1"] = lightValue;

      // (Optional) You can also send button states
      JsonObject buttons = payload.createNestedObject("buttons");
      buttons["D5"] = "released";

      // 4. Send it!
      String dataString;
      serializeJson(dataDoc, dataString);
      webSocket.sendTXT(dataString);
      Serial.println("Sent data: " + dataString);
    }
  }
}
```

When the server gets this message, it finds your project, looks at the `sensors` object, and saves the value `753.00` to the sensor with `pinNumber: "A0"` and `254.00` to the sensor with `pinNumber: "A1"`.